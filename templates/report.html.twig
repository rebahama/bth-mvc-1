{% extends "footer-report.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
<div class="grid-container-report">
<h2> Report </h2>
<ul class="kmom-area"> 
<li> <a href="#kmom01">Kmom01</a> </li>
<li> <a href="#kmom02">Kmom02</a> </li>
<li> <a href="#kmom03">Kmom03</a> </li>
<li> <a href="#kmom04">Kmom04</a> </li>
<li> <a href="#kmom05">Kmom05</a> </li>
<li> <a href="#kmom06">Kmom06</a> </li>
</ul>
<h3 id="kmom01"> kmom01 </h3>
<p><b>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering. </b></p>
<p>Jag har tidigare jobbat lite med C# på när det gäller att programmera med fokus på objektorientering, vi fick lära oss att skapa instanser och 
sedan koppla olika attribut till en person och sedan så fick vi återanvända koden flera gånger för att skapa olika personer med olika attribut. Vi använde
oss av klasser. Allt detta skedde i konsolen, så att jobba med objektorientering i webbklienten är helt nytt för mig och det ska bli intressant att se
hur det funkar </p>

<p> <b>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser? </b><p>
<p>
"PHP har något som heter klasser och objekt. En klass är typ som en mall för att göra olika saker, och ett objekt är som en specifik sak som du skapar från den mallen. Till exempel kan du ha en klass som heter "Bil" och skapa olika bilar från den klassen.
Klasser har saker som heter egenskaper, som är som information om objektet.
Till exempel kan en egenskap på en bil vara "färg" eller "modell".
Sen har de också saker som heter metoder, som är som saker klassen kan göra.
Till exempel kan en metod på en bil vara "starta" eller "stoppa".
När du skapar en bil från klassen använder du något som heter en konstruktor.
Den hjälper till att sätta upp bilen och ge den rätt egenskaper.
Sen kan du använda bilen och göra saker med den, som att starta den eller köra den.
En annan sak som är viktig är att klasser kan "ärva" från varandra.
Det betyder att en klass kan få saker från en annan klass och lägga till sina egna saker. 
Till exempel kan du ha en klass som heter "Sportbil" som ärver från "Bil" och lägger till saker som gör att den kan köra snabbare.
 </p>

<p> <b> Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den? </b> </p>
<p> När man kollar på den första gången så ser man att det är väldigt många filer som finns och alla möjliga kombinatoner. Men när man
väl börjar skapa sidorna så börjar man inse att det är endast ett fåtal filer man behöver fokusera på för att skapa sidan i webbklienten. Så det 
är inte jättekomplicerat när man väl kör och skapar sidorna. </p>

<p> <b> Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla. </b> </p>
<p> En del som jag tyckte var intressant och värdefullt att veta är "Updating your dependencies". Det känns som att allting utvecklas hela tiden och det gäller 
att man hänger med tekniken speciellt när man installerar en webpack samt olika dependencies till sitt projekt. Om jag inte lär mig hur man uppdaterar mina dependencies samt mitt projekt
så är det lätt att hamna efter samt så är det viktigt att man gör det på rätt sätt så att saker inte krockar med varandra. Jag kan tycka att just detta är lite svårt när man har 
massa olika tekniker som samverkar med varandra därför är detta värdefullt för mig att veta. </p>

<p> <b>Vilken är din TIL för detta kmom? </b> <p>

<p> Jag har lärt mig att det är också jätteviktigt att kunna veta hur man uppgraderar sin version av programm som man använder för att hänga med teknologin som utvecklas nästan hela tiden. </p>

<h3 id="kmom02"> kmom02 </h3>
<p> <b>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP. </b> </p>

<p>Arv (Inheritance):
Arv är som att säga att en klass kan "ärva" egenskaper och beteenden från en annan klass. Tänk på det som att ha en släktträd där en klass är barn till en annan. Om klass A är föräldern och klass B är barnet, så kan klass B ärva alla egenskaper och metoder från klass A. Till exempel, om klassen Animal har egenskaper som namn och ålder, kan klassen Dog ärva dessa egenskaper och även ha sina egna specifika egenskaper som ras och favoritmat.
Komposition (Composition):
Komposition handlar om att bygga mer komplexa saker genom att kombinera mindre delar. Tänk på det som att sätta ihop en pussel där varje bit representerar en klass eller ett objekt. Istället för att en klass ärver från en annan, kan den ha en relation med en annan klass genom att hålla en instans av den klassen som ett fält. Till exempel, om vi har en klass Car, så kan den innehålla en instans av klassen Engine. På så sätt är Car sammansatt av en Engine.
Interface (Interface):
Ett interface definierar ett kontrakt som en klass måste följa. Tänk på det som en checklista för vad en klass måste göra, men det definierar inte hur klassen ska göra det. Interface specificerar bara vilka metoder som måste finnas i en klass som implementerar det. Till exempel, om vi har ett interface Flyable, så måste alla klasser som implementerar detta interface ha en fly() metod, men det är upp till varje klass att bestämma hur den metoden fungerar.
Trait (Trait):
Ett trait är som en förpackning med återanvändbara bitar av kod som kan återanvändas i flera klasser. Tänk på det som att ha en låda med verktyg som du kan använda i olika projekt. Du kan inkludera ett trait i en klass för att lägga till vissa metoder eller egenskaper till den klassen, utan att behöva duplicera kod. Till exempel, om du har ett trait Loggable, kan du inkludera det i olika klasser för att lägga till loggningsfunktionalitet utan att behöva skriva samma kod om och om igen. </p>

<p> <b> Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd,
vilken förbättringspotential ser du i din koden och dina klasser? </b> </p>

<p> Det första som jag lade märke till är hur viktig grund strukturen är så att det blir rätt ifrån början, jag började med att skapa en mapp
i src mappen och i den mappen som hade jag två php filer, den första Card.php där skapar jag klassen Card och en konstruktor med två olika värden. Andra filen
som heter DeckOfCards.php där skapades sjäva kortleken och alla funktioner som exemplvis sortering osv, jag instanserar också ett nytt objekt här genom att skapa new Card. Så här använder
jag mig av klassen. Sedan sker anropningen i cardController filen där klasserna anropas tillsammans med alla funktioner som finns i klasserna. Även CardGraphic.php skapades där jag använder mig av
 unicode metoden som också anropas i twig templaten för att displaya symbolerna, arv används i denna klass där Card klassen är föräladren och CardGraphic classen 
 är barnet Jag skulle vilja säga 
att jag är rätt nöjd med uppgiften då jag löste allting på ett smidigt sätt. Jag tycker inte att jag använde för komplicerad kod utan allting verkade logiskt och bra. </p>
<p> <b>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC? </b> </p>
<p> Det börjar nu falla på plats, man börjar lära sig att installera och skriva kod utan att behöva kolla på dokumentation när man ska starta upp allting.
Jag tycker att Symfon påminner om Express som vi hade i databaskursen då det verkar vara samma princip här när vi exemplvis använder oss av routes och sedan
anropar olika funktioner i src mappen.
 </p>

<p> <b>Vilken är din TIL för detta kmom? </b></p>

<p> Att det är jättevikitgt att ha rätt struktur ifrån början med alla klasser och att logiken är på rätt sätt, det är inte roligt mitt i projektet att behöva
ändra om i grundstrukuren av en klass och kod för då går inte logiken åt rätt håll. </p>


<h3 id="kmom03"> kmom03 </h3>

<p> <b> Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod.
Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?
 </b> </p>

 <p> Jag tyckte att det var lite svårt att börja med flödesdiagrammet för att jag inte riktigt visste vad som 
 skulle hända ifrån första början, kanske kommer det att bli lättare med tiden när man har gjort det ett par gånger 
 men jag lyckades sen att få till en någorlunda bra diagram som fick mig att börja på rätt spår. Psuedokod däremot var något som kändes 
 mycket bättre, när jag skrev psuedokoden så började allting falla på plats och jag visste nästan direkt hur jag skulle strukturera och 
 vart jag skall börja någonstans. </p>

<p> Sammanfattningen för mig var att psuedokoden var mycket mer till hjälp än flödesdiagrammet i det här sammanhanget och som 
hjälpte mig enormt mycket att komma in i en tankebane och börja visualisera olika idér på hur man kan börja och avsluta applikationen. </p>


<p> <b> Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd,
vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet? </p> </b>

<p> Jag tycker att jag har löst uppgiften relativt bra, jag har använd mig av objektorienterad metod. Jag har skapat olika klasser och 
vissa klasser använder sig av kompositon och ärver ifrån varandra samt olika klassmetoder. I controller routerna så instanserar jag klasserna och sedan 
använder jag mig av klassmetoder för att utföra beräkningar och olika saker som jag vill uppnå. </p>

<p> En sak som jag är missnöjd med är att jag borde ha skapat en egen gameController fil och separerat koden för själva spelet och dess regler 
istället för att fortsätta använda mig av cardController. Jag hade också kunnat skapa en ny klass för själva spel reglerna, nu skapade jag istället klassmetoder 
som användes i nuvarande klasser.   </p>

<p> Jag är nöjd med att jag använder mig av objektorienterad metod i controller, jag tycker inte att jag har så mycket kod och det var det som var 
målet. Man kan se hur jag instanserar klassen och sedan använder mig av olika klassmetoder för att utföra olika beräkningar. Även applikationen fungerar 
som den skall. Men till nästa gång har jag lärt mig att dela upp koden och klasserna var för sig, detta underlättar när man skall debugga samt ser 
mycket snyggare ut. </p>

<p> <b>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen? </b> </p>

<p> Det var väldigt svårt i början och det kändes som att man behöver få många bitar att falla på plats till man kan starta upp
servern och se en text som man har skrivit. Men nu när man har gjort det ett par gånger så börjar det kännas bra än så länge iallafall, 
det är viktigt också att man förstår grunderna i programmering för att man skall kunna använda sig av Symfony så att man kan uppskatta
vad som sker bakom kulisserna när man använder sig av ramverket.</p>



<p> <b> Vilken är din TIL för detta kmom? </b> </p>

<p> Jag har lärt mig att nästa gång separera koden mer och dela upp allting, exempel klasser och controller skall struktureras på ett bättre sätt 
 så att koden ser snyggare och är lättare att debugga.
 </p>

<h3 id="kmom04"> kmom04 </h3>

<p> <b> Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt. </b> </p>
<p> Jag tyckte att det var intressant att se hur man kan göra kod testning automatiserat, istället för att klicka sig på sidan 
manuellt och testa flera utfall så kändes detta mycket snabbare och bättre. Jag behövde inte uppnå ett viss poäng innan jag kunde se ett visst resultat
allt detta kunde uppnås snabbt med PHPUnit. </p>


<p> <b> Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning? </b> </p>
<p> Jag lyckades upppnå totalt 94.44% på mina klasser, jag hade 3 klasser och kodtäckningen är nästan på alla metoder. För mig känns detta bra 
men man kan alltid göra bättre ifrån sig och uppnå upp till 100% nästa gång. </p>


<p> <b> Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet? </b> </p>
<p> Jag tycker att min kod var bra testbar kod, jag tror också att när klasserna är skapade på ett objektorienterad sätt så blir det också mycket lättare att göra koden testbar.
Detta märkte jag när jag skapade instanserna och kallade på dom olika metoderna precis som man gjorde i controller filerna, det är också nu så man börjar förstå 
fördelarna med objektorienterad programmering. En sak som jag hade kunnat göra så att koden är mer testbar är att dela upp koden i ännu mer klasser som jag skrev i tidigare kmom, det gör 
koden både mer testbar och lättare att debugga samt snyggare kod. </p>

<p> <b> Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte. </b> <p>
<p> Jag valde att inte skriva om någon del av min kod, det fanns ingen behov av mig att göra detta när jag skulle köra olika testfall så jag lät min kod 
vara för denna gång. </p>


<p> <b> Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”. </b> </p>
<p> Jag tror att testbar kod har mer logiken av själva koden att göra än snygg och ren, bara för att koden inte är snygg och ren så betyder det inte 
att man inte har testbar kod. Sen tror jag också att olika personer har kanske inte samma perspektiv på vad som är snygg och ren kod. Men jag tror att så 
länge man följer praxis och delar upp sin kod och strukturerar den i olika filer med fin namngiving och funktioner samt styckeindelning, även att logiken 
är robust så tror jag att koden av sig själv blir snygg och ren samt testbar på köpet. Jag märkte att när allting var objektorienterad så gick allting mycket smidigt
och jag behövde då inte ändra om något i källkoden. </p>

<p> <b> Vilken är din TIL för detta kmom? </b> <p>
<p> Att inte behöva klicka manuellt samt vänta tills ett väntad resultat kändes bra, det är väldigt tidseffektivt att kunna skriva bra tester som producerar
önskat resultat. </p>



<h3 id="kmom05"> kmom05 </h3>

<p> <b> Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen? </b> </p>
<p> Jag tycker att det gick smidigt och det var lätt att följa intrukstionerna som stod med, allting fanns med tydligt. När jag jobbade genom övningen
och höll på med att utveckla CRUD funktionerna så tänkte jag på hur allting är byggd på klasser och metoder. Jag la märke till att de flesta kod som man skriver 
är i princip, deklaration av variabler, loopar, if satser inuti i en klass och en metod inuti en klass. Sedan anropar man dessa ifrån en annan fil. </p>

<p> <b> Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet? </b> <p>

<p> Jag ville göra tydligt för användaren att när man vill göra en ändrining i databasen så skall detta markeras med en tydlig och 
färgglad knapp, exemplvis delete skall vara markerad med röd och när man sparar något skall det finnas en stor knapp med exemplvis grön färg. 
Det är viktigt att alla uppdateringar i databasen markeras, eventuellt även kompleteras med olika meddleanden som bekräftar detta för användaren. </p>


<p> <b> Gick det bra att jobba med ORM i CRUD eller vad anser du om det, jämför gärna med andra sätt att jobba med databaser? </b> <p>

<p> Jag tycker att det gick bra med att jobba i CRUD, jag kollade på exemplet som vi kunde hitta i doctrine övningen och utgick ifrån den. Jag testade också 
att köra en raw sql kommand i reposotory filen för att jämföra hur det är att jobba med dessa två och vad som kändes bäst. Jag insåg när man använder sig av Doctrines
färdiga lösingar för ORM så är det objektorienterat och anropar man metoder i olika klasser. Det kändes mycket lättare att jobba objektorienterad än att använda en sql kommand 
och behöva komma ihåg hela sql kommandot när man vill utföra något med databasen. </p>

<p> <b> Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser? </b> </p>

<p> Jag tycker att jobba med ORM kändes mycket bättre än att jobba med raw sql kommandon, fördelen är att ens kod ser snyggare ut och 
man kan använda sig av objektorientering för att utföra sql kommandon. Men en nackdel kan vara att man inte ser koden ifrån grunden 
och kanske inte kan problemlösa och debugga lika lätt än om det hade varit en raw sql kommando. Men för generella simpla och allmäna saker 
som exemplvis CRUD kommandon så tycker jag att det är mycket lättare och bättre att använda sig av ORM och utföra dessa kommandon med objektorienterade metoder.
Däremot för lite mer komplexa och mer personligt anpassade sql kommandon som man vill göra väldigt personligt så kanske det är bättre att jobba med raw sql kommandon. </p>


</p>

<p> <b> Vilken är din TIL för detta kmom? </b> </p>

<p> Det var kul att göra denna övning och komma igång med databaser, jag lärde mig väldigt mycket. Jag lärde mig hur objektorienterade metoder kan ävan användas 
för databas kommandon, och att beronde på vad för önskemål som man har så kan man även använda sig av rena sql kommandon. Det känns alltid bra att veta om flera olika 
metoder för att kunna lösa olika problem. Det är alltid bra att kunna ha flera verktyg i sin verktygslåda och att ha vetskapen om att man kan använda sig av flera olika verktyg, kände 
att denna kmom bidrog till just detta. </p>

<h3 id="kmom06"> kmom06 </h3>

<p> <b> Hur uppfattade du verktyget phpmetrics och fann du några särskilda bitar mer värdefulla än andra? Var det några särskilda metrics eller bilder du uppskattade? </b> </p>
<p>Från början så var det mycket text och bilder så man förstod inte riktigt, men efter att ha läst om "6c:na" så började man förstå lite hur saker och ting hänger ihop.
Jag tycker att complexiteten bilden med stora ringarna är uppskattande, man får en inblick av hur ens applikation ser ut kvalitetsmässigt samt en bra överblick över vad som behöver förbättras.
Även violations och error meddelanden är väldigt tydliga på vad man behöver förbättra för att kunna öka sin score. </p>

<p> <b>Berätta hur det gick att integrera med Scrutinizer och vilken är din första känsla av verktyget och dess badges? Vilken kodtäckning och kodkvalitet fick du efter första bygget? </b> </p>
<p> Det verkade komplicerat ifrån början men det gick bra till slut, jag tycker att scrutinizer var lite lättare att förstå än phpmetrics. Det kändes också bra att kunna få en badge 
för sin kod, jag tycker att badgen förklarade mycket med sina procenttal. Första gången jag analyserade mitt projekt så fick jag 100% "very good". Men jag fick däremot inte lika bra på kodtäckningen,
här fick jag endast 23% och mitt mål var att öka den som jag lyckades öka till 37%. Scrutinizer hade väldigt bra Förklaraningar på vad man behöver förbättra samt vad men behöver göra för att uppnå ett högre resultat, jag gillar också att verktyget 
analyserar automatiskt så fort man pushar upp till Github.  </p>

<p> <b> Hur är din egen syn på kodkvalitet, berätta lite om den? Tror du man kan man påvisa kodkvalitet i någon viss mån med badges eller vad tror du? </b> <p>
<p> Jag tror så här, när man börjar programmera och skriva sin kod så är det jätteviktigt att man ger rätt namn till klasser och metoder samt delar upp sina filer och inte har massa 
komplicerade metoder i sina klasser och sedan gör unit tester på dessa klasser och metoder så kommer man komma långt. Har man den vetskapen redan från början så tror jag 
att man kommer få bra score direkt när man kör första analysen, mitt mål när jag alltid skapar olika kmom så har jag dom sakerna i åtanke för att följa rätt kod praxis.
Jag fick det bevisat för mig när jag fick 10 av 10 i scrutinizer, men det fanns även något som jag kunde gjort bättre ifrån början och det var att dela upp klasserna 
i mindre filer. Detta märkte jag i phpmetrics när jag körde analysen där och efter att ha fixat detta så blev det genast bättre. Så jag tror att badgen faktiskt är kvitto 
på att man gör rätt ifrån sig och detta påstår jag för att man fick uppleva det själv.  </p>


<p> <b> Vilken är din TIL för detta kmom? </b> </p>

<p> Att man alltid skall följa kodpraxis som exemplvis, styckeindelning, rätt namngivning och strukturera klasser samt metoder.
Det kändes bra att få det bekräftat med ett score och siffra som bekräftar och belönar när man gör rätt redan ifrån första början. </p>

</div>

</div>
{% endblock %}